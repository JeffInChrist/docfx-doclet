### YamlMime:ManagedReference
items:
- uid: "com.microsoft.samples.subpackage.Person"
  id: "Person"
  parent: "com.microsoft.samples.subpackage"
  children:
  - "com.microsoft.samples.subpackage.Person.Person()"
  - "com.microsoft.samples.subpackage.Person.getFirstName()"
  - "com.microsoft.samples.subpackage.Person.setFirstName(java.lang.String)"
  - "com.microsoft.samples.subpackage.Person.getLastName()"
  - "com.microsoft.samples.subpackage.Person.setLastName(java.lang.String)"
  - "com.microsoft.samples.subpackage.Person.buildPerson(com.microsoft.samples.subpackage.Person)"
  - "com.microsoft.samples.subpackage.Person.IdentificationInfo"
  langs:
  - "java"
  name: "Person<T>"
  nameWithType: "Person<T>"
  fullName: "com.microsoft.samples.subpackage.Person<T>"
  type: "Class"
  package: "com.microsoft.samples.subpackage"
  summary: "Class that describes some person"
  syntax:
    content: "public class Person<T>"
    typeParameters:
    - id: "T"
  inheritance:
  - "java.lang.Object"
- uid: "com.microsoft.samples.subpackage.Person.Person()"
  id: "Person()"
  parent: "com.microsoft.samples.subpackage.Person"
  langs:
  - "java"
  name: "Person()"
  nameWithType: "Person<T>.Person()"
  fullName: "com.microsoft.samples.subpackage.Person<T>.Person()"
  overload: "com.microsoft.samples.subpackage.Person<T>.Person*"
  type: "Constructor"
  package: "com.microsoft.samples.subpackage"
  syntax:
    content: "public Person()"
- uid: "com.microsoft.samples.subpackage.Person.getFirstName()"
  id: "getFirstName()"
  parent: "com.microsoft.samples.subpackage.Person"
  langs:
  - "java"
  name: "getFirstName()"
  nameWithType: "Person<T>.getFirstName()"
  fullName: "com.microsoft.samples.subpackage.Person<T>.getFirstName()"
  overload: "com.microsoft.samples.subpackage.Person<T>.getFirstName*"
  type: "Method"
  package: "com.microsoft.samples.subpackage"
  syntax:
    content: "public String getFirstName()"
    return:
      type: "java.lang.String"
- uid: "com.microsoft.samples.subpackage.Person.setFirstName(java.lang.String)"
  id: "setFirstName(java.lang.String)"
  parent: "com.microsoft.samples.subpackage.Person"
  langs:
  - "java"
  name: "setFirstName(String firstName)"
  nameWithType: "Person<T>.setFirstName(String firstName)"
  fullName: "com.microsoft.samples.subpackage.Person<T>.setFirstName(String firstName)"
  overload: "com.microsoft.samples.subpackage.Person<T>.setFirstName*"
  type: "Method"
  package: "com.microsoft.samples.subpackage"
  syntax:
    content: "public void setFirstName(String firstName)"
    parameters:
    - id: "firstName"
      type: "java.lang.String"
- uid: "com.microsoft.samples.subpackage.Person.getLastName()"
  id: "getLastName()"
  parent: "com.microsoft.samples.subpackage.Person"
  langs:
  - "java"
  name: "getLastName()"
  nameWithType: "Person<T>.getLastName()"
  fullName: "com.microsoft.samples.subpackage.Person<T>.getLastName()"
  overload: "com.microsoft.samples.subpackage.Person<T>.getLastName*"
  type: "Method"
  package: "com.microsoft.samples.subpackage"
  syntax:
    content: "public String getLastName()"
    return:
      type: "java.lang.String"
- uid: "com.microsoft.samples.subpackage.Person.setLastName(java.lang.String)"
  id: "setLastName(java.lang.String)"
  parent: "com.microsoft.samples.subpackage.Person"
  langs:
  - "java"
  name: "setLastName(String lastName)"
  nameWithType: "Person<T>.setLastName(String lastName)"
  fullName: "com.microsoft.samples.subpackage.Person<T>.setLastName(String lastName)"
  overload: "com.microsoft.samples.subpackage.Person<T>.setLastName*"
  type: "Method"
  package: "com.microsoft.samples.subpackage"
  syntax:
    content: "public void setLastName(String lastName)"
    parameters:
    - id: "lastName"
      type: "java.lang.String"
- uid: "com.microsoft.samples.subpackage.Person.buildPerson(com.microsoft.samples.subpackage.Person)"
  id: "buildPerson(com.microsoft.samples.subpackage.Person)"
  parent: "com.microsoft.samples.subpackage.Person"
  langs:
  - "java"
  name: "buildPerson(Person seed)"
  nameWithType: "Person<T>.buildPerson(Person seed)"
  fullName: "com.microsoft.samples.subpackage.Person<T>.buildPerson(Person seed)"
  overload: "com.microsoft.samples.subpackage.Person<T>.buildPerson*"
  type: "Method"
  package: "com.microsoft.samples.subpackage"
  summary: "We need to have this method that takes parameter and return types declared in the current class"
  syntax:
    content: "public static Person buildPerson(Person seed)"
    parameters:
    - id: "seed"
      type: "com.microsoft.samples.subpackage.Person"
    return:
      type: "com.microsoft.samples.subpackage.Person"
references:
- uid: "java.lang.String"
  isExternal: true
  name: "String"
  nameWithType: "String"
  fullName: "java.lang.String"
- uid: "T"
  name: "T"
  nameWithType: "T"
  fullName: "T"
- uid: "com.microsoft.samples.subpackage.Person.IdentificationInfo"
  name: "Person.IdentificationInfo"
  nameWithType: "Person.IdentificationInfo"
  fullName: "com.microsoft.samples.subpackage.Person.IdentificationInfo"
